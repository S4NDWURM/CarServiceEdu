// <auto-generated />
using System;
using CarService.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarService.DataAccess.Migrations
{
    [DbContext(typeof(CarServiceDbContext))]
    partial class CarServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarService.DataAccess.Entities.CarBrandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CarBrands");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.CarModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarBrandId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CarBrandId", "Name")
                        .IsUnique();

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.DiagnosticsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DiagnosticsDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticsDate");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestId");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("WorkExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeStatusId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeSpecializationEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.HasKey("EmployeeId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("EmployeeSpecializations", (string)null);
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeStatuses");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.GenerationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarModelId")
                        .HasColumnType("uuid");

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId", "Name")
                        .IsUnique();

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PartBrandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PartBrands");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PartBrandId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Article")
                        .IsUnique();

                    b.HasIndex("PartBrandId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkEmployeeEntity", b =>
                {
                    b.Property<Guid>("PlannedWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("PlannedWorkId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PlannedWorkEmployees", (string)null);
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkId");

                    b.ToTable("PlannedWorks", (string)null);
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkPartEntity", b =>
                {
                    b.Property<Guid>("PlannedWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PlannedWorkId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("PlannedWorkParts", (string)null);
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.RequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Specialist"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.SpecializationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.StatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.TypeOfDayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypesOfDay");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.WorkDayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("TypeOfDayId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TypeOfDayId");

                    b.ToTable("WorkDays");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.WorkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Works");
                });

            modelBuilder.Entity("VehicleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationId")
                        .HasColumnType("uuid");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.CarModelEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.CarBrandEntity", "CarBrand")
                        .WithMany("CarModels")
                        .HasForeignKey("CarBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarBrand");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.DiagnosticsEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.EmployeeEntity", "Employee")
                        .WithMany("Diagnostics")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.RequestEntity", "Request")
                        .WithMany("Diagnostics")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.EmployeeStatusEntity", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeStatus");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeSpecializationEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.EmployeeEntity", "Employee")
                        .WithMany("EmployeeSpecializations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.SpecializationEntity", "Specialization")
                        .WithMany("EmployeeSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.GenerationEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.CarModelEntity", "CarModel")
                        .WithMany("Generations")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PartEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.PartBrandEntity", "PartBrand")
                        .WithMany("Parts")
                        .HasForeignKey("PartBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PartBrand");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkEmployeeEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.EmployeeEntity", "Employee")
                        .WithMany("PlannedWorkEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.PlannedWorkEntity", "PlannedWork")
                        .WithMany("PlannedWorkEmployees")
                        .HasForeignKey("PlannedWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PlannedWork");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.RequestEntity", "Request")
                        .WithMany("PlannedWorks")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.StatusEntity", "Status")
                        .WithMany("PlannedWorks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.WorkEntity", "Work")
                        .WithMany("PlannedWorks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Status");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkPartEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.PartEntity", "Part")
                        .WithMany("PlannedWorkParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.PlannedWorkEntity", "PlannedWork")
                        .WithMany("PlannedWorkParts")
                        .HasForeignKey("PlannedWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("PlannedWork");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.RequestEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.ClientEntity", "Client")
                        .WithMany("Requests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.StatusEntity", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VehicleEntity", "Vehicle")
                        .WithMany("Requests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Status");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.UserEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.ClientEntity", "Client")
                        .WithOne("User")
                        .HasForeignKey("CarService.DataAccess.Entities.UserEntity", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarService.DataAccess.Entities.EmployeeEntity", "Employee")
                        .WithOne("User")
                        .HasForeignKey("CarService.DataAccess.Entities.UserEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarService.DataAccess.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.WorkDayEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.EmployeeEntity", "Employee")
                        .WithMany("WorkDays")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarService.DataAccess.Entities.TypeOfDayEntity", "TypeOfDay")
                        .WithMany("WorkDays")
                        .HasForeignKey("TypeOfDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TypeOfDay");
                });

            modelBuilder.Entity("VehicleEntity", b =>
                {
                    b.HasOne("CarService.DataAccess.Entities.GenerationEntity", "Generation")
                        .WithMany("Vehicles")
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.CarBrandEntity", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.CarModelEntity", b =>
                {
                    b.Navigation("Generations");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("Diagnostics");

                    b.Navigation("EmployeeSpecializations");

                    b.Navigation("PlannedWorkEmployees");

                    b.Navigation("User")
                        .IsRequired();

                    b.Navigation("WorkDays");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.EmployeeStatusEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.GenerationEntity", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PartBrandEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PartEntity", b =>
                {
                    b.Navigation("PlannedWorkParts");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.PlannedWorkEntity", b =>
                {
                    b.Navigation("PlannedWorkEmployees");

                    b.Navigation("PlannedWorkParts");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.RequestEntity", b =>
                {
                    b.Navigation("Diagnostics");

                    b.Navigation("PlannedWorks");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.SpecializationEntity", b =>
                {
                    b.Navigation("EmployeeSpecializations");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.StatusEntity", b =>
                {
                    b.Navigation("PlannedWorks");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.TypeOfDayEntity", b =>
                {
                    b.Navigation("WorkDays");
                });

            modelBuilder.Entity("CarService.DataAccess.Entities.WorkEntity", b =>
                {
                    b.Navigation("PlannedWorks");
                });

            modelBuilder.Entity("VehicleEntity", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
